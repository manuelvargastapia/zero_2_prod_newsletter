use actix_web::{web, HttpResponse};
use chrono::Utc;
use sqlx::PgPool;
use tracing_futures::Instrument;
use uuid::Uuid;

/// Struct to model the inputed form data when sending a `POST` request through
/// [subscribe] endpoint.
#[derive(serde::Deserialize)]
pub struct FormData {
    email: String,
    name: String,
}

/// Endpoint to add new user to newsletter.
///
/// Responses:
/// - 200 OK: successful subscription
/// - 400 BAD REQUEST: name or email field is missing
///
/// It uses actix-web's [web::Form] extractor. The extractors are in charge of handling
/// failure responses. `actix-web` invokes [web::FromRequest]'s `from_request()`
/// (`FromRequest` is implemented by `Form` and any other extractor) for all `subscribe`'s
/// input arguments: in this case `Form::from_request`. `Form::from_request` tries to
/// deserialise the body into [FormData] (through `serde_urlencoded` and the `Deserialize`
/// implementation of [FormData]), automatically generated by
/// `#[derive(serde::Deserialize)]`.
///
/// If the extraction succeed, the hanlder is called normally, but
/// if it fails, then the corresponding error (`400 BAD REQUEST`) is returned to the
/// caller and the handler is never invoked; when `from_request()` returns a
/// [actix_web::Error] it can be converted to [HttpResponse].
///
/// Similarly, the [web::Data] extractor allows us to get the connection pool from
/// application state as defined in `run`. In other contexts, this could be referred
/// as _dependency injection_.
pub async fn subscribe(
    form: web::Form<FormData>,
    pool: web::Data<PgPool>,
) -> Result<HttpResponse, HttpResponse> {
    // We're using the tracing crate to print in terminal the logs captured
    // by actix_web::middlewares::Logger.
    // For correlate properly the logs (ex, when logging concurrent queries),
    // we assign a uuid to each log to tracking them easily.
    // Additionally, we use the info_span! macro to show the exact time window
    // for the process being logged. The span is "exit" when _request_span_guard
    // is dropped at the end of subscribe
    let request_id = Uuid::new_v4();
    let request_span = tracing::info_span!(
        "Adding a new subscriber.",
        %request_id,
        email = %form.email,
        name = %form.name
    );
    // Enter the span of request_span ()
    let _request_span_guard = request_span.enter();

    // Another way of intrumentation with instrument() from tracing_futures
    let query_span = tracing::info_span!("Saving new subscriber details in the database");

    sqlx::query!(
        r#"
        INSERT INTO subscriptions (id, email, name, subscribed_at)
        VALUES ($1, $2, $3, $4)
        "#,
        Uuid::new_v4(),
        form.email,
        form.name,
        Utc::now()
    )
    // sqlx doesn't allow to run multiple queries concurrently over the same DB connection.
    // That's why it requires a mutable reference (that is, a "unique" refence) to the
    // connection. We can't get a mutable reference from web::Data, so we need to use
    // something else, like PgPool in this case.
    .execute(pool.as_ref())
    // Log every poll, that can be multiple, before resolving future.
    // We pass a span as argument ans enters it every time self, the future,
    // is polled; it exits the span every time the future is parked
    .instrument(query_span)
    .await
    .map_err(|e| {
        tracing::error!("Failed to execute query: {:?}", e);
        HttpResponse::InternalServerError().finish()
    })?;

    tracing::info!("New subscriber detials have been saved");
    Ok(HttpResponse::Ok().finish())
}
