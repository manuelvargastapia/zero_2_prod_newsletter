use std::convert::TryInto;

use actix_web::{web, HttpResponse};
use chrono::Utc;
use sqlx::PgPool;
use uuid::Uuid;

use crate::domain::{NewSubscriber, SubscriberEmail, SubscriberName};

/// Struct to model the inputed form data when sending a `POST` request through
/// [subscribe] endpoint.
#[derive(serde::Deserialize)]
pub struct FormData {
    email: String,
    name: String,
}

/// USeful type conversion
impl TryInto<NewSubscriber> for FormData {
    type Error = String;

    fn try_into(self) -> Result<NewSubscriber, Self::Error> {
        let name = SubscriberName::parse(self.name)?;
        let email = SubscriberEmail::parse(self.email)?;
        Ok(NewSubscriber { email, name })
    }
}

/// Endpoint to add new user to newsletter.
///
/// Responses:
/// - 200 OK: successful subscription
/// - 400 BAD REQUEST: name or email field is missing
///
/// It uses actix-web's [web::Form] extractor. The extractors are in charge of handling
/// failure responses. `actix-web` invokes [web::FromRequest]'s `from_request()`
/// (`FromRequest` is implemented by `Form` and any other extractor) for all `subscribe`'s
/// input arguments: in this case `Form::from_request`. `Form::from_request` tries to
/// deserialise the body into [FormData] (through `serde_urlencoded` and the `Deserialize`
/// implementation of [FormData]), automatically generated by
/// `#[derive(serde::Deserialize)]`.
///
/// If the extraction succeed, the hanlder is called normally, but
/// if it fails, then the corresponding error (`400 BAD REQUEST`) is returned to the
/// caller and the handler is never invoked; when `from_request()` returns a
/// [actix_web::Error] it can be converted to [HttpResponse].
///
/// Similarly, the [web::Data] extractor allows us to get the connection pool from
/// application state as defined in `run`. In other contexts, this could be referred
/// as _dependency injection_.
///
/// ### Instrumentation
///
/// `#[tracing::instrument]` is a procedural macro that creates a span at the beginning
/// of the function invocation. It automatically attaches all arguments passed to the function
/// to the context of the span --in this case, `form` and `pool`. We use the `skipe` directive
/// to no explicitely tell `tracing` to ignore them in logs. Also, the `fields` directive enriches
/// the span's context --leverages the same syntax as `info_span!` macro.
#[tracing::instrument(
    name = "Adding a new subscriber",
    skip(form, pool),
    fields(
        email = %form.email,
        name = %form.name
    )
)]
pub async fn subscribe(form: web::Form<FormData>, pool: web::Data<PgPool>) -> HttpResponse {
    // We're using the tracing crate to print in terminal the logs captured
    // by actix_web::middlewares::Logger.
    // For correlate properly the logs (ex, when logging concurrent queries),
    // we assign a uuid to each log to tracking them easily.
    // Additionally, we use the info_span! macro to show the exact time window
    // for the process being logged. The span is "exit" when _request_span_guard
    // is dropped at the end of subscribe

    // `try_into()` takes care of the conversion fromraw data to domain
    // model. Meanwhile `subscribe` remains in charge of generating the HTTP
    // response to the incoming HTTP request.
    let new_subscriber = match form.0.try_into() {
        Ok(new_subscriber) => new_subscriber,
        Err(_) => return HttpResponse::BadRequest().finish(),
    };

    match insert_subscriber(&pool, &new_subscriber).await {
        Ok(_) => HttpResponse::Ok().finish(),
        Err(_) => HttpResponse::InternalServerError().finish(),
    }
}

#[tracing::instrument(
    name = "Saving new subscriber details in the database",
    skip(new_subscriber, pool)
)]
pub async fn insert_subscriber(
    pool: &PgPool,
    new_subscriber: &NewSubscriber,
) -> Result<(), sqlx::Error> {
    sqlx::query!(
        r#"
        INSERT INTO subscriptions (id, email, name, subscribed_at)
        VALUES ($1, $2, $3, $4)
        "#,
        Uuid::new_v4(),
        new_subscriber.email.as_ref(),
        new_subscriber.name.as_ref(),
        Utc::now()
    )
    // sqlx doesn't allow to run multiple queries concurrently over the same DB connection.
    // That's why it requires a mutable reference (that is, a "unique" refence) to the
    // connection. We can't get a mutable reference from web::Data, so we need to use
    // something else, like PgPool in this case.
    .execute(pool)
    .await
    .map_err(|e| {
        tracing::error!("Failed to execute query: {:?}", e);
        e
    })?;

    Ok(())
}
