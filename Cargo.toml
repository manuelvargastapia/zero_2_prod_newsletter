[package]
name = "zero2prod"
version = "0.1.0"
authors = ["manuelvargastapia <manuelvargastapia@gmail.com>"]
edition = "2018"

# We need a binary (main.rs) and a library (lib.rs, that holds the app itself) 
# to be able to share code between folders
[lib]
path = "src/lib.rs"

# Not strictly required, but it gives us the full picture. We use [[bin]]
# because it's an array, as we can have multiple binaries
[[bin]]
path = "src/main.rs"
name = "zero2prod"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# We're using the beta release to get tokio 1.x.x. With this, we gain access
# to any tokio primitive
actix-web = "4.0.0-beta.4"
# We need the optional "derive" feature to use "serde"'s procedural macros:
# "#[derive(Serialize)]" and "#[derive(Deserialize)]"
serde = { version = "1.0.125", features = ["derive"]}
config = "0.11.0"
uuid = { version = "0.8.1", features = ["v4"] }
chrono = "0.4.19"
tracing = { version = "0.1.25", features = ["log"] }
tracing-subscriber = { version = "0.2.17", features = ["registry", "env-filter"] }
tracing-futures = "0.2.5"
tracing-bunyan-formatter = "0.2.0"
tracing-log = "0.1.2"

# Using table-like toml syntax to avoid a super-long line!
[dependencies.sqlx]
version = "0.5.1"
default-features = false
features = [
    "runtime-actix-rustls", # use the "actix" runtime and "rustls" as TLS backend
    "macros", # access to "sqlx::query!" and "sqlx::query_as!"
    "postgres", # specific Postgress functionality
    "uuid", # support for mapping SQL UUIDs to the Uuid type from the "uuid" crate
    "chrono", # support for mapping SQL "timestamptz" to the "DateTime<T>" type from the "chrono" crate
    "migrate" # same functions used by "sqlx-cli" to manage migrations
]

[dev-dependencies]
actix-rt = "2.1.0"
reqwest = "0.11.2"
tokio = "1.4.0"
lazy_static = "1.4.0"
